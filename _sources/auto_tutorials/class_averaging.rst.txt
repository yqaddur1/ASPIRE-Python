
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/class_averaging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_class_averaging.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_class_averaging.py:


Class Averaging
===============

We demonstrate class averaging using the rotationally invariant representation algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 7-22

.. code-block:: default


    import logging

    import matplotlib.pyplot as plt
    import numpy as np
    from PIL import Image as PILImage

    from aspire.classification import RIRClass2D, TopClassSelector
    from aspire.image import Image
    from aspire.noise import WhiteNoiseAdder
    from aspire.source import ArrayImageSource  # Helpful hint if you want to BYO array.
    from aspire.utils import gaussian_2d

    logger = logging.getLogger(__name__)








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Build Simulated Data
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 27-29

Circular 2D Gaussian Image
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: default


    L = 100
    round_disc = gaussian_2d(L, sigma=L / 4)
    plt.imshow(round_disc, cmap="gray")
    plt.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_001.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 36-38

Oval 2D Gaussian Image
^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 38-43

.. code-block:: default


    oval_disc = gaussian_2d(L, sigma=(L / 20, L / 5))
    plt.imshow(oval_disc, cmap="gray")
    plt.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_002.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-48

Handed Image
^^^^^^^^^^^^

Create richer test set by including an asymmetric image.

.. GENERATED FROM PYTHON SOURCE LINES 48-58

.. code-block:: default


    # Create a second oval.
    oval_disc2 = gaussian_2d(L, mu=(L / 5, L / 6), sigma=(L / 15, L / 20))

    # Strategically add it to `oval_disc`.
    yoval_discL = oval_disc.copy()
    yoval_discL += oval_disc2
    plt.imshow(yoval_discL, cmap="gray")
    plt.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_003.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-63

Reflected Image
^^^^^^^^^^^^^^^

Also include the reflection of  the asymmetric image.

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: default


    yoval_discR = np.flipud(yoval_discL)
    plt.imshow(yoval_discR, cmap="gray")
    plt.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_004.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-73

Example Data Set Source
^^^^^^^^^^^^^^^^^^^^^^^

We concatenate and shuffle 512 rotations of the Gaussian images above to create our data set.

.. GENERATED FROM PYTHON SOURCE LINES 73-100

.. code-block:: default


    # How many entries (angles) in our stack
    N = 512
    thetas = np.linspace(start=0, stop=360, num=N, endpoint=False)

    classRound = np.zeros((N, L, L))
    classOval = np.zeros((N, L, L))
    classYOvalL = np.zeros((N, L, L))
    classYOvalR = np.zeros((N, L, L))

    for i, theta in enumerate(thetas):
        classRound[i] = np.asarray(PILImage.fromarray(round_disc).rotate(theta))
        classOval[i] = np.asarray(PILImage.fromarray(oval_disc).rotate(theta))
        classYOvalL[i] = np.asarray(PILImage.fromarray(yoval_discL).rotate(theta))
        classYOvalR[i] = np.asarray(PILImage.fromarray(yoval_discR).rotate(theta))

    # We'll make an example data set by concatentating then shuffling these.
    example_array = np.concatenate((classRound, classOval, classYOvalL, classYOvalR))
    np.random.seed(1234567)
    np.random.shuffle(example_array)

    # So now that we have cooked up an example dataset, lets create an ASPIRE source
    src = ArrayImageSource(example_array)

    # Let's peek at the images to make sure they're shuffled up nicely
    src.images[:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_005.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 101-106

Class Average
-------------

We use the ASPIRE ``RIRClass2D`` class to classify the images via the rotationally invariant representation (RIR)
algorithm. We then yield class averages by performing ``classify``.

.. GENERATED FROM PYTHON SOURCE LINES 106-122

.. code-block:: default


    rir = RIRClass2D(
        src,
        fspca_components=400,
        bispectrum_components=300,  # Compressed Features after last PCA stage.
        n_nbor=10,
        n_classes=10,
        large_pca_implementation="legacy",
        nn_implementation="legacy",
        bispectrum_implementation="legacy",
        num_procs=1,  # Change to "auto" if your machine has many processors
    )

    classes, reflections, dists = rir.classify()
    avgs = rir.averages(classes, reflections, dists)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/4 [00:00<?, ?it/s]     50%|#####     | 2/4 [00:00<00:00, 18.50it/s]    100%|##########| 4/4 [00:00<00:00, 18.52it/s]    100%|##########| 4/4 [00:00<00:00, 18.49it/s]
      0%|          | 0/4 [00:00<?, ?it/s]     25%|##5       | 1/4 [00:00<00:00,  4.65it/s]     50%|#####     | 2/4 [00:00<00:00,  4.70it/s]     75%|#######5  | 3/4 [00:00<00:00,  4.71it/s]    100%|##########| 4/4 [00:00<00:00,  4.69it/s]    100%|##########| 4/4 [00:00<00:00,  4.69it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:23<03:34, 23.85s/it]     20%|##        | 2/10 [00:47<03:09, 23.68s/it]     30%|###       | 3/10 [01:10<02:45, 23.59s/it]     40%|####      | 4/10 [01:34<02:21, 23.58s/it]     50%|#####     | 5/10 [01:58<01:58, 23.61s/it]     60%|######    | 6/10 [02:21<01:34, 23.61s/it]     70%|#######   | 7/10 [02:45<01:10, 23.57s/it]     80%|########  | 8/10 [03:08<00:47, 23.57s/it]     90%|######### | 9/10 [03:32<00:23, 23.54s/it]    100%|##########| 10/10 [03:55<00:00, 23.53s/it]    100%|##########| 10/10 [03:55<00:00, 23.58s/it]
      0%|          | 0/10 [00:00<?, ?it/s]     30%|###       | 3/10 [00:00<00:00, 20.92it/s]     60%|######    | 6/10 [00:00<00:00, 21.21it/s]     90%|######### | 9/10 [00:00<00:00, 21.19it/s]    100%|##########| 10/10 [00:00<00:00, 21.18it/s]




.. GENERATED FROM PYTHON SOURCE LINES 123-125

Display Classes
^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 125-128

.. code-block:: default


    avgs.images[:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_006.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 129-131

Class Averaging with Noise
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 133-135

Add Noise to Data Set
^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 135-153

.. code-block:: default


    # Using the sample variance, we'll compute a target noise variance
    # Noise
    var = np.var(src.images[:].asnumpy())
    noise_var = var * 2**4

    # Then create noise with the ``WhiteNoiseAdder`` class.
    noise = WhiteNoiseAdder(var=noise_var, seed=123)

    # Add noise to the images by performing ``forward``
    noisy_im = noise.forward(src.images[:])

    # Recast as an ASPIRE source
    noisy_src = ArrayImageSource(noisy_im)

    # Let's peek at the noisey images
    noisy_src.images[:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_007.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 154-161

RIR with Noise
^^^^^^^^^^^^^^
This also demonstrates changing the Nearest Neighbor search to using
scikit-learn, and using ``TopClassSelector``.``TopClassSelector``
will deterministically select the first ``n_classes``.  This is useful
for development and debugging.  By default ``RIRClass2D`` uses a
``RandomClassSelector``.

.. GENERATED FROM PYTHON SOURCE LINES 161-178

.. code-block:: default


    noisy_rir = RIRClass2D(
        noisy_src,
        fspca_components=400,
        bispectrum_components=300,
        n_nbor=10,
        n_classes=10,
        selector=TopClassSelector(),
        large_pca_implementation="legacy",
        nn_implementation="sklearn",
        bispectrum_implementation="legacy",
        num_procs=1,  # Change to "auto" if your machine has many processors
    )

    classes, reflections, dists = noisy_rir.classify()
    avgs = noisy_rir.averages(classes, reflections, dists)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/4 [00:00<?, ?it/s]     50%|#####     | 2/4 [00:00<00:00, 18.90it/s]    100%|##########| 4/4 [00:00<00:00, 19.01it/s]    100%|##########| 4/4 [00:00<00:00, 18.97it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:23<03:32, 23.58s/it]     20%|##        | 2/10 [00:47<03:08, 23.57s/it]     30%|###       | 3/10 [01:10<02:44, 23.50s/it]     40%|####      | 4/10 [01:34<02:20, 23.49s/it]     50%|#####     | 5/10 [01:57<01:57, 23.51s/it]     60%|######    | 6/10 [02:21<01:34, 23.51s/it]     70%|#######   | 7/10 [02:44<01:10, 23.53s/it]     80%|########  | 8/10 [03:08<00:47, 23.54s/it]     90%|######### | 9/10 [03:31<00:23, 23.53s/it]    100%|##########| 10/10 [03:55<00:00, 23.53s/it]    100%|##########| 10/10 [03:55<00:00, 23.53s/it]
      0%|          | 0/10 [00:00<?, ?it/s]     30%|###       | 3/10 [00:00<00:00, 20.61it/s]     60%|######    | 6/10 [00:00<00:00, 20.74it/s]     90%|######### | 9/10 [00:00<00:00, 20.75it/s]    100%|##########| 10/10 [00:00<00:00, 20.73it/s]




.. GENERATED FROM PYTHON SOURCE LINES 179-181

Display Classes
^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 181-185

.. code-block:: default


    avgs.images[:10].show()





.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_008.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 186-190

Review a class
--------------

Select a class to review.

.. GENERATED FROM PYTHON SOURCE LINES 190-205

.. code-block:: default


    review_class = 5

    # Display the original image.
    noisy_src.images[review_class].show()

    # Report the identified neighbor indices
    logger.info(f"Class {review_class}'s neighors: {classes[review_class]}")

    # Report the identified neighbors
    Image(noisy_src.images[:][classes[review_class]]).show()

    # Display the averaged result
    avgs.images[review_class].show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_009.png
         :alt: class averaging
         :srcset: /auto_tutorials/images/sphx_glr_class_averaging_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_010.png
         :alt: class averaging
         :srcset: /auto_tutorials/images/sphx_glr_class_averaging_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_011.png
         :alt: class averaging
         :srcset: /auto_tutorials/images/sphx_glr_class_averaging_011.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 206-213

Alignment Details
-----------------

Alignment details are exposed when avaialable from an underlying ``averager``.
In this case, we'll get the estimated alignments for the ``review_class``.
These alignment arrays are indexed the same as ``classes``,
having shape (n_classes, n_nbor).

.. GENERATED FROM PYTHON SOURCE LINES 213-255

.. code-block:: default


    est_rotations = noisy_rir.averager.rotations[review_class]
    est_shifts = noisy_rir.averager.shifts[review_class]
    est_correlations = noisy_rir.averager.correlations[review_class]

    logger.info(f"Estimated Rotations: {est_rotations}")
    logger.info(f"Estimated Shifts: {est_shifts}")
    logger.info(f"Estimated Correlations: {est_correlations}")

    # Compare the original unaligned images with the estimated alignment.
    # Get the indices from the classification results.
    nbr = 3
    original_img_0_idx = classes[review_class][0]
    original_img_nbr_idx = classes[review_class][nbr]

    # Lookup the images.
    original_img_0 = noisy_src.images[original_img_0_idx].asnumpy()[0]
    original_img_nbr = noisy_src.images[original_img_nbr_idx].asnumpy()[0]

    # Rotate using estimated rotations.
    angle = est_rotations[nbr] * 180 / np.pi
    if reflections[review_class][nbr]:
        original_img_nbr = np.flipud(original_img_nbr)
    rotated_img_nbr = np.asarray(PILImage.fromarray(original_img_nbr).rotate(angle))

    plt.subplot(2, 2, 1)
    plt.title("Original Images")
    plt.imshow(original_img_0)
    plt.xlabel("Img 0")
    plt.subplot(2, 2, 2)
    plt.imshow(original_img_nbr)
    plt.xlabel(f"Img {nbr}")

    plt.subplot(2, 2, 3)
    plt.title("Est Rotation Applied")
    plt.imshow(original_img_0)
    plt.xlabel("Img 0")
    plt.subplot(2, 2, 4)
    plt.imshow(rotated_img_nbr)
    plt.xlabel(f"Img {nbr} rotated {angle:.4}*")
    plt.tight_layout()
    plt.show()



.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_012.png
   :alt: Original Images, Est Rotation Applied
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_012.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 8 minutes  57.415 seconds)


.. _sphx_glr_download_auto_tutorials_class_averaging.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: class_averaging.py <class_averaging.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: class_averaging.ipynb <class_averaging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
