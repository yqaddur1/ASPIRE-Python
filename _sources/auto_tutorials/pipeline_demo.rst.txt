
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/pipeline_demo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_pipeline_demo.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_pipeline_demo.py:


================================
Ab-initio Pipeline Demonstration
================================

This tutorial demonstrates some key components of an ab-initio reconstruction pipeline using
synthetic data generated with ASPIRE's ``Simulation`` class of objects.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

Download a Volume
-----------------
We begin by downloading a high resolution volume map of the 80S Ribosome, sourced from
EMDB: https://www.ebi.ac.uk/emdb/EMD-2660.

.. GENERATED FROM PYTHON SOURCE LINES 15-34

.. code-block:: default


    import os

    import numpy as np
    import requests


    # Download volume
    def download(url, save_path, chunk_size=1024 * 1024):
        r = requests.get(url, stream=True)
        with open(save_path, "wb") as fd:
            for chunk in r.iter_content(chunk_size=chunk_size):
                fd.write(chunk)


    if not os.path.exists("data/emd_2660.map"):
        url = "https://ftp.ebi.ac.uk/pub/databases/emdb/structures/EMD-2660/map/emd_2660.map.gz"
        download(url, "data/emd_2660.map")








.. GENERATED FROM PYTHON SOURCE LINES 38-41

Load a Volume
-------------
We use ASPIRE's ``Volume`` class to load and downsample the volume.

.. GENERATED FROM PYTHON SOURCE LINES 41-51

.. code-block:: default


    from aspire.volume import Volume

    # Load 80s Ribosome
    original_vol = Volume.load("data/emd_2660.map", dtype=np.float32)

    # Downsample the volume
    res = 41
    vol = original_vol.downsample(res)








.. GENERATED FROM PYTHON SOURCE LINES 52-57

.. note::
    A ``Volume`` can be saved using the ``Volume.save()`` method as follows::

        fn = f"downsampled_80s_ribosome_size{res}.mrc"
        vol.save(fn, overwrite=True)

.. GENERATED FROM PYTHON SOURCE LINES 60-65

Create a Simulation Source
--------------------------
ASPIRE's ``Simulation`` class can be used to generate a synthetic dataset of projection images.
A ``Simulation`` object produces random projections of a supplied Volume and applies noise and
CTF filters. The resulting stack of 2D images is stored in an ``Image`` object.

.. GENERATED FROM PYTHON SOURCE LINES 68-73

Noise and CTF Filters
^^^^^^^^^^^^^^^^^^^^^
Let's start by creating noise and CTF filters. The ``operators`` package contains a collection
of filter classes that can be supplied to a ``Simulation``. We use ``ScalarFilter`` to create
Gaussian white noise and ``RadialCTFFilter`` to generate a set of CTF filters with various defocus values.

.. GENERATED FROM PYTHON SOURCE LINES 73-94

.. code-block:: default


    # Create noise and CTF filters
    from aspire.noise import WhiteNoiseAdder
    from aspire.operators import RadialCTFFilter

    # Gaussian noise filter.
    # Note, the value supplied to the ``WhiteNoiseAdder``, chosen based on other parameters
    # for this quick tutorial, can be changed to adjust the power of the noise.
    noise_adder = WhiteNoiseAdder(var=1e-5)

    # Radial CTF Filter
    defocus_min = 15000  # unit is angstroms
    defocus_max = 25000
    defocus_ct = 7

    ctf_filters = [
        RadialCTFFilter(pixel_size=5, defocus=d)
        for d in np.linspace(defocus_min, defocus_max, defocus_ct)
    ]









.. GENERATED FROM PYTHON SOURCE LINES 95-98

Initialize Simulation Object
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
We feed our ``Volume`` and filters into ``Simulation`` to generate the dataset of images.

.. GENERATED FROM PYTHON SOURCE LINES 98-117

.. code-block:: default


    from aspire.source import Simulation

    # set parameters
    res = 41
    n_imgs = 2500

    # For this ``Simulation`` we set all 2D offset vectors to zero,
    # but by default offset vectors will be randomly distributed.
    src = Simulation(
        L=res,  # resolution
        n=n_imgs,  # number of projections
        vols=vol,  # volume source
        offsets=np.zeros((n_imgs, 2)),  # Default: images are randomly shifted
        noise_adder=noise_adder,
        unique_filters=ctf_filters,
    )









.. GENERATED FROM PYTHON SOURCE LINES 118-121

Several Views of the Projection Images
--------------------------------------
We can access several views of the projection images.

.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: default


    # with no corruption applied
    src.projections[0:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_pipeline_demo_001.png
   :alt: pipeline demo
   :srcset: /auto_tutorials/images/sphx_glr_pipeline_demo_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 126-130

.. code-block:: default


    # with no noise corruption
    src.clean_images[0:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_pipeline_demo_002.png
   :alt: pipeline demo
   :srcset: /auto_tutorials/images/sphx_glr_pipeline_demo_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-136

.. code-block:: default


    # with noise and CTF corruption
    src.images[0:10].show()





.. image-sg:: /auto_tutorials/images/sphx_glr_pipeline_demo_003.png
   :alt: pipeline demo
   :srcset: /auto_tutorials/images/sphx_glr_pipeline_demo_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 137-140

CTF Correction
--------------
We apply ``phase_flip()`` to correct for CTF effects.

.. GENERATED FROM PYTHON SOURCE LINES 140-145

.. code-block:: default


    src.phase_flip()
    src.images[0:10].show()





.. image-sg:: /auto_tutorials/images/sphx_glr_pipeline_demo_004.png
   :alt: pipeline demo
   :srcset: /auto_tutorials/images/sphx_glr_pipeline_demo_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-152

Class Averaging
---------------
We use ``RIRClass2D`` object to classify the images via the rotationally invariant
representation (RIR) algorithm. Class selection is customizable. The classification module
also includes a set of protocols for selecting a set of images to be used for classification.
Here we're using ``TopClassSelector``, which selects the first ``n_classes`` images from the source.

.. GENERATED FROM PYTHON SOURCE LINES 152-176

.. code-block:: default


    from aspire.classification import RIRClass2D, TopClassSelector

    # set parameters
    n_classes = 200
    n_nbor = 6

    # Create a class averaging instance. Note that the ``fspca_components`` and
    # ``bispectrum_components`` were selected for this small tutorial.
    rir = RIRClass2D(
        src,
        fspca_components=40,
        bispectrum_components=30,
        n_nbor=n_nbor,
        n_classes=n_classes,
        selector=TopClassSelector(),
        num_procs=1,  # Change to "auto" if your machine has many processors
    )

    # classify and average
    classes, reflections, distances = rir.classify()
    avgs = rir.averages(classes, reflections, distances)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/5 [00:00<?, ?it/s]     20%|##        | 1/5 [00:01<00:07,  1.95s/it]     40%|####      | 2/5 [00:03<00:05,  1.94s/it]     60%|######    | 3/5 [00:05<00:03,  1.94s/it]     80%|########  | 4/5 [00:07<00:01,  1.94s/it]    100%|##########| 5/5 [00:09<00:00,  1.86s/it]    100%|##########| 5/5 [00:09<00:00,  1.90s/it]
      0%|          | 0/5 [00:00<?, ?it/s]     20%|##        | 1/5 [00:00<00:01,  3.76it/s]     40%|####      | 2/5 [00:00<00:00,  3.77it/s]     60%|######    | 3/5 [00:00<00:00,  3.81it/s]     80%|########  | 4/5 [00:01<00:00,  3.80it/s]    100%|##########| 5/5 [00:01<00:00,  4.00it/s]    100%|##########| 5/5 [00:01<00:00,  3.90it/s]
      0%|          | 0/200 [00:00<?, ?it/s]      0%|          | 1/200 [00:01<05:05,  1.53s/it]      1%|1         | 2/200 [00:02<04:50,  1.47s/it]      2%|1         | 3/200 [00:04<04:45,  1.45s/it]      2%|2         | 4/200 [00:05<04:41,  1.43s/it]      2%|2         | 5/200 [00:07<04:38,  1.43s/it]      3%|3         | 6/200 [00:08<04:36,  1.42s/it]      4%|3         | 7/200 [00:10<04:34,  1.42s/it]      4%|4         | 8/200 [00:11<04:32,  1.42s/it]      4%|4         | 9/200 [00:12<04:30,  1.42s/it]      5%|5         | 10/200 [00:14<04:29,  1.42s/it]      6%|5         | 11/200 [00:15<04:28,  1.42s/it]      6%|6         | 12/200 [00:17<04:26,  1.42s/it]      6%|6         | 13/200 [00:18<04:24,  1.42s/it]      7%|7         | 14/200 [00:19<04:23,  1.42s/it]      8%|7         | 15/200 [00:21<04:22,  1.42s/it]      8%|8         | 16/200 [00:22<04:20,  1.42s/it]      8%|8         | 17/200 [00:24<04:19,  1.42s/it]      9%|9         | 18/200 [00:25<04:17,  1.42s/it]     10%|9         | 19/200 [00:27<04:16,  1.42s/it]     10%|#         | 20/200 [00:28<04:15,  1.42s/it]     10%|#         | 21/200 [00:29<04:13,  1.42s/it]     11%|#1        | 22/200 [00:31<04:12,  1.42s/it]     12%|#1        | 23/200 [00:32<04:10,  1.42s/it]     12%|#2        | 24/200 [00:34<04:09,  1.42s/it]     12%|#2        | 25/200 [00:35<04:07,  1.42s/it]     13%|#3        | 26/200 [00:36<04:06,  1.42s/it]     14%|#3        | 27/200 [00:38<04:05,  1.42s/it]     14%|#4        | 28/200 [00:39<04:04,  1.42s/it]     14%|#4        | 29/200 [00:41<04:02,  1.42s/it]     15%|#5        | 30/200 [00:42<04:01,  1.42s/it]     16%|#5        | 31/200 [00:44<04:00,  1.42s/it]     16%|#6        | 32/200 [00:45<03:58,  1.42s/it]     16%|#6        | 33/200 [00:46<03:57,  1.42s/it]     17%|#7        | 34/200 [00:48<03:55,  1.42s/it]     18%|#7        | 35/200 [00:49<03:55,  1.42s/it]     18%|#8        | 36/200 [00:51<03:52,  1.42s/it]     18%|#8        | 37/200 [00:52<03:51,  1.42s/it]     19%|#9        | 38/200 [00:54<03:50,  1.42s/it]     20%|#9        | 39/200 [00:55<03:48,  1.42s/it]     20%|##        | 40/200 [00:56<03:47,  1.42s/it]     20%|##        | 41/200 [00:58<03:45,  1.42s/it]     21%|##1       | 42/200 [00:59<03:44,  1.42s/it]     22%|##1       | 43/200 [01:01<03:42,  1.42s/it]     22%|##2       | 44/200 [01:02<03:41,  1.42s/it]     22%|##2       | 45/200 [01:03<03:39,  1.42s/it]     23%|##3       | 46/200 [01:05<03:38,  1.42s/it]     24%|##3       | 47/200 [01:06<03:37,  1.42s/it]     24%|##4       | 48/200 [01:08<03:35,  1.42s/it]     24%|##4       | 49/200 [01:09<03:34,  1.42s/it]     25%|##5       | 50/200 [01:11<03:32,  1.42s/it]     26%|##5       | 51/200 [01:12<03:31,  1.42s/it]     26%|##6       | 52/200 [01:13<03:30,  1.42s/it]     26%|##6       | 53/200 [01:15<03:28,  1.42s/it]     27%|##7       | 54/200 [01:16<03:27,  1.42s/it]     28%|##7       | 55/200 [01:18<03:25,  1.42s/it]     28%|##8       | 56/200 [01:19<03:24,  1.42s/it]     28%|##8       | 57/200 [01:20<03:22,  1.42s/it]     29%|##9       | 58/200 [01:22<03:21,  1.42s/it]     30%|##9       | 59/200 [01:23<03:19,  1.42s/it]     30%|###       | 60/200 [01:25<03:18,  1.41s/it]     30%|###       | 61/200 [01:26<03:16,  1.41s/it]     31%|###1      | 62/200 [01:28<03:14,  1.41s/it]     32%|###1      | 63/200 [01:29<03:13,  1.41s/it]     32%|###2      | 64/200 [01:30<03:11,  1.41s/it]     32%|###2      | 65/200 [01:32<03:10,  1.41s/it]     33%|###3      | 66/200 [01:33<03:09,  1.41s/it]     34%|###3      | 67/200 [01:35<03:07,  1.41s/it]     34%|###4      | 68/200 [01:36<03:06,  1.42s/it]     34%|###4      | 69/200 [01:37<03:05,  1.42s/it]     35%|###5      | 70/200 [01:39<03:04,  1.42s/it]     36%|###5      | 71/200 [01:40<03:02,  1.42s/it]     36%|###6      | 72/200 [01:42<03:01,  1.42s/it]     36%|###6      | 73/200 [01:43<02:59,  1.42s/it]     37%|###7      | 74/200 [01:45<02:58,  1.42s/it]     38%|###7      | 75/200 [01:46<02:56,  1.41s/it]     38%|###8      | 76/200 [01:47<02:55,  1.41s/it]     38%|###8      | 77/200 [01:49<02:54,  1.42s/it]     39%|###9      | 78/200 [01:50<02:53,  1.42s/it]     40%|###9      | 79/200 [01:52<02:51,  1.42s/it]     40%|####      | 80/200 [01:53<02:50,  1.42s/it]     40%|####      | 81/200 [01:54<02:48,  1.42s/it]     41%|####1     | 82/200 [01:56<02:47,  1.42s/it]     42%|####1     | 83/200 [01:57<02:45,  1.41s/it]     42%|####2     | 84/200 [01:59<02:43,  1.41s/it]     42%|####2     | 85/200 [02:00<02:42,  1.41s/it]     43%|####3     | 86/200 [02:02<02:41,  1.41s/it]     44%|####3     | 87/200 [02:03<02:39,  1.42s/it]     44%|####4     | 88/200 [02:04<02:38,  1.42s/it]     44%|####4     | 89/200 [02:06<02:37,  1.41s/it]     45%|####5     | 90/200 [02:07<02:35,  1.41s/it]     46%|####5     | 91/200 [02:09<02:34,  1.42s/it]     46%|####6     | 92/200 [02:10<02:32,  1.42s/it]     46%|####6     | 93/200 [02:11<02:31,  1.41s/it]     47%|####6     | 94/200 [02:13<02:29,  1.41s/it]     48%|####7     | 95/200 [02:14<02:28,  1.41s/it]     48%|####8     | 96/200 [02:16<02:26,  1.41s/it]     48%|####8     | 97/200 [02:17<02:25,  1.41s/it]     49%|####9     | 98/200 [02:18<02:24,  1.42s/it]     50%|####9     | 99/200 [02:20<02:22,  1.42s/it]     50%|#####     | 100/200 [02:21<02:21,  1.42s/it]     50%|#####     | 101/200 [02:23<02:20,  1.42s/it]     51%|#####1    | 102/200 [02:24<02:18,  1.42s/it]     52%|#####1    | 103/200 [02:26<02:17,  1.41s/it]     52%|#####2    | 104/200 [02:27<02:15,  1.41s/it]     52%|#####2    | 105/200 [02:28<02:14,  1.41s/it]     53%|#####3    | 106/200 [02:30<02:12,  1.41s/it]     54%|#####3    | 107/200 [02:31<02:11,  1.42s/it]     54%|#####4    | 108/200 [02:33<02:10,  1.42s/it]     55%|#####4    | 109/200 [02:34<02:08,  1.41s/it]     55%|#####5    | 110/200 [02:35<02:07,  1.41s/it]     56%|#####5    | 111/200 [02:37<02:05,  1.41s/it]     56%|#####6    | 112/200 [02:38<02:04,  1.42s/it]     56%|#####6    | 113/200 [02:40<02:03,  1.42s/it]     57%|#####6    | 114/200 [02:41<02:01,  1.42s/it]     57%|#####7    | 115/200 [02:43<02:00,  1.42s/it]     58%|#####8    | 116/200 [02:44<01:59,  1.42s/it]     58%|#####8    | 117/200 [02:45<01:57,  1.42s/it]     59%|#####8    | 118/200 [02:47<01:55,  1.41s/it]     60%|#####9    | 119/200 [02:48<01:54,  1.42s/it]     60%|######    | 120/200 [02:50<01:53,  1.42s/it]     60%|######    | 121/200 [02:51<01:51,  1.42s/it]     61%|######1   | 122/200 [02:52<01:50,  1.41s/it]     62%|######1   | 123/200 [02:54<01:49,  1.42s/it]     62%|######2   | 124/200 [02:55<01:47,  1.41s/it]     62%|######2   | 125/200 [02:57<01:45,  1.41s/it]     63%|######3   | 126/200 [02:58<01:44,  1.41s/it]     64%|######3   | 127/200 [03:00<01:43,  1.42s/it]     64%|######4   | 128/200 [03:01<01:42,  1.42s/it]     64%|######4   | 129/200 [03:02<01:40,  1.42s/it]     65%|######5   | 130/200 [03:04<01:39,  1.42s/it]     66%|######5   | 131/200 [03:05<01:37,  1.41s/it]     66%|######6   | 132/200 [03:07<01:36,  1.41s/it]     66%|######6   | 133/200 [03:08<01:34,  1.41s/it]     67%|######7   | 134/200 [03:09<01:33,  1.41s/it]     68%|######7   | 135/200 [03:11<01:31,  1.41s/it]     68%|######8   | 136/200 [03:12<01:30,  1.41s/it]     68%|######8   | 137/200 [03:14<01:29,  1.41s/it]     69%|######9   | 138/200 [03:15<01:27,  1.41s/it]     70%|######9   | 139/200 [03:17<01:26,  1.41s/it]     70%|#######   | 140/200 [03:18<01:24,  1.41s/it]     70%|#######   | 141/200 [03:19<01:23,  1.41s/it]     71%|#######1  | 142/200 [03:21<01:21,  1.41s/it]     72%|#######1  | 143/200 [03:22<01:20,  1.41s/it]     72%|#######2  | 144/200 [03:24<01:18,  1.41s/it]     72%|#######2  | 145/200 [03:25<01:17,  1.41s/it]     73%|#######3  | 146/200 [03:26<01:16,  1.41s/it]     74%|#######3  | 147/200 [03:28<01:14,  1.41s/it]     74%|#######4  | 148/200 [03:29<01:13,  1.41s/it]     74%|#######4  | 149/200 [03:31<01:11,  1.41s/it]     75%|#######5  | 150/200 [03:32<01:10,  1.41s/it]     76%|#######5  | 151/200 [03:33<01:09,  1.41s/it]     76%|#######6  | 152/200 [03:35<01:07,  1.41s/it]     76%|#######6  | 153/200 [03:36<01:06,  1.41s/it]     77%|#######7  | 154/200 [03:38<01:04,  1.41s/it]     78%|#######7  | 155/200 [03:39<01:03,  1.41s/it]     78%|#######8  | 156/200 [03:40<01:02,  1.41s/it]     78%|#######8  | 157/200 [03:42<01:00,  1.41s/it]     79%|#######9  | 158/200 [03:43<00:59,  1.41s/it]     80%|#######9  | 159/200 [03:45<00:57,  1.41s/it]     80%|########  | 160/200 [03:46<00:56,  1.41s/it]     80%|########  | 161/200 [03:48<00:54,  1.41s/it]     81%|########1 | 162/200 [03:49<00:53,  1.41s/it]     82%|########1 | 163/200 [03:50<00:52,  1.41s/it]     82%|########2 | 164/200 [03:52<00:50,  1.41s/it]     82%|########2 | 165/200 [03:53<00:49,  1.41s/it]     83%|########2 | 166/200 [03:55<00:48,  1.41s/it]     84%|########3 | 167/200 [03:56<00:46,  1.41s/it]     84%|########4 | 168/200 [03:57<00:45,  1.41s/it]     84%|########4 | 169/200 [03:59<00:43,  1.41s/it]     85%|########5 | 170/200 [04:00<00:42,  1.41s/it]     86%|########5 | 171/200 [04:02<00:40,  1.41s/it]     86%|########6 | 172/200 [04:03<00:39,  1.41s/it]     86%|########6 | 173/200 [04:04<00:38,  1.41s/it]     87%|########7 | 174/200 [04:06<00:36,  1.41s/it]     88%|########7 | 175/200 [04:07<00:35,  1.41s/it]     88%|########8 | 176/200 [04:09<00:33,  1.41s/it]     88%|########8 | 177/200 [04:10<00:32,  1.41s/it]     89%|########9 | 178/200 [04:12<00:31,  1.41s/it]     90%|########9 | 179/200 [04:13<00:29,  1.41s/it]     90%|######### | 180/200 [04:14<00:28,  1.41s/it]     90%|######### | 181/200 [04:16<00:26,  1.41s/it]     91%|#########1| 182/200 [04:17<00:25,  1.41s/it]     92%|#########1| 183/200 [04:19<00:24,  1.41s/it]     92%|#########2| 184/200 [04:20<00:22,  1.41s/it]     92%|#########2| 185/200 [04:21<00:21,  1.41s/it]     93%|#########3| 186/200 [04:23<00:19,  1.41s/it]     94%|#########3| 187/200 [04:24<00:18,  1.41s/it]     94%|#########3| 188/200 [04:26<00:16,  1.41s/it]     94%|#########4| 189/200 [04:27<00:15,  1.41s/it]     95%|#########5| 190/200 [04:28<00:14,  1.41s/it]     96%|#########5| 191/200 [04:30<00:12,  1.41s/it]     96%|#########6| 192/200 [04:31<00:11,  1.41s/it]     96%|#########6| 193/200 [04:33<00:09,  1.41s/it]     97%|#########7| 194/200 [04:34<00:08,  1.41s/it]     98%|#########7| 195/200 [04:36<00:07,  1.41s/it]     98%|#########8| 196/200 [04:37<00:05,  1.42s/it]     98%|#########8| 197/200 [04:38<00:04,  1.42s/it]     99%|#########9| 198/200 [04:40<00:02,  1.42s/it]    100%|#########9| 199/200 [04:41<00:01,  1.42s/it]    100%|##########| 200/200 [04:43<00:00,  1.41s/it]    100%|##########| 200/200 [04:43<00:00,  1.42s/it]
      0%|          | 0/200 [00:00<?, ?it/s]      0%|          | 1/200 [00:00<00:38,  5.20it/s]      2%|1         | 3/200 [00:00<00:17, 11.25it/s]      2%|2         | 5/200 [00:00<00:13, 14.20it/s]      4%|3         | 7/200 [00:00<00:12, 15.55it/s]      4%|4         | 9/200 [00:00<00:11, 16.76it/s]      6%|5         | 11/200 [00:00<00:10, 17.45it/s]      6%|6         | 13/200 [00:00<00:10, 17.99it/s]      8%|7         | 15/200 [00:00<00:10, 18.28it/s]      8%|8         | 17/200 [00:01<00:10, 18.14it/s]     10%|9         | 19/200 [00:01<00:09, 18.26it/s]     10%|#         | 21/200 [00:01<00:09, 18.34it/s]     12%|#1        | 23/200 [00:01<00:09, 18.27it/s]     12%|#2        | 25/200 [00:01<00:09, 18.55it/s]     14%|#3        | 27/200 [00:01<00:09, 18.76it/s]     14%|#4        | 29/200 [00:01<00:08, 19.01it/s]     16%|#5        | 31/200 [00:01<00:09, 18.75it/s]     16%|#6        | 33/200 [00:01<00:09, 18.22it/s]     18%|#7        | 35/200 [00:02<00:08, 18.35it/s]     18%|#8        | 37/200 [00:02<00:08, 18.41it/s]     20%|#9        | 39/200 [00:02<00:08, 18.76it/s]     20%|##        | 41/200 [00:02<00:08, 18.79it/s]     22%|##1       | 43/200 [00:02<00:08, 18.60it/s]     22%|##2       | 45/200 [00:02<00:08, 18.40it/s]     24%|##3       | 47/200 [00:02<00:08, 18.26it/s]     24%|##4       | 49/200 [00:02<00:08, 18.19it/s]     26%|##5       | 51/200 [00:02<00:08, 18.41it/s]     26%|##6       | 53/200 [00:02<00:08, 18.04it/s]     28%|##7       | 55/200 [00:03<00:08, 17.60it/s]     28%|##8       | 57/200 [00:03<00:07, 18.04it/s]     30%|##9       | 59/200 [00:03<00:07, 18.26it/s]     30%|###       | 61/200 [00:03<00:07, 18.47it/s]     32%|###1      | 63/200 [00:03<00:07, 18.48it/s]     32%|###2      | 65/200 [00:03<00:07, 18.36it/s]     34%|###3      | 67/200 [00:03<00:07, 18.43it/s]     34%|###4      | 69/200 [00:03<00:07, 18.56it/s]     36%|###5      | 71/200 [00:03<00:06, 18.74it/s]     36%|###6      | 73/200 [00:04<00:06, 18.81it/s]     38%|###7      | 75/200 [00:04<00:06, 18.63it/s]     38%|###8      | 77/200 [00:04<00:06, 18.80it/s]     40%|###9      | 79/200 [00:04<00:06, 18.81it/s]     40%|####      | 81/200 [00:04<00:06, 18.93it/s]     42%|####1     | 83/200 [00:04<00:06, 19.15it/s]     42%|####2     | 85/200 [00:04<00:06, 19.15it/s]     44%|####3     | 87/200 [00:04<00:05, 18.96it/s]     44%|####4     | 89/200 [00:04<00:05, 18.91it/s]     46%|####5     | 91/200 [00:05<00:05, 18.50it/s]     46%|####6     | 93/200 [00:05<00:05, 18.73it/s]     48%|####7     | 95/200 [00:05<00:05, 18.86it/s]     48%|####8     | 97/200 [00:05<00:05, 18.53it/s]     50%|####9     | 99/200 [00:05<00:05, 18.64it/s]     50%|#####     | 101/200 [00:05<00:05, 18.40it/s]     52%|#####1    | 103/200 [00:05<00:05, 18.64it/s]     52%|#####2    | 105/200 [00:05<00:05, 18.61it/s]     54%|#####3    | 107/200 [00:05<00:04, 18.60it/s]     55%|#####4    | 109/200 [00:05<00:04, 18.86it/s]     56%|#####5    | 111/200 [00:06<00:04, 18.98it/s]     56%|#####6    | 113/200 [00:06<00:04, 18.85it/s]     57%|#####7    | 115/200 [00:06<00:04, 18.84it/s]     58%|#####8    | 117/200 [00:06<00:04, 18.47it/s]     60%|#####9    | 119/200 [00:06<00:04, 18.28it/s]     60%|######    | 121/200 [00:06<00:04, 18.41it/s]     62%|######1   | 123/200 [00:06<00:04, 18.28it/s]     62%|######2   | 125/200 [00:06<00:04, 18.64it/s]     64%|######3   | 127/200 [00:06<00:03, 18.70it/s]     64%|######4   | 129/200 [00:07<00:03, 18.64it/s]     66%|######5   | 131/200 [00:07<00:03, 18.72it/s]     66%|######6   | 133/200 [00:07<00:03, 18.54it/s]     68%|######7   | 135/200 [00:07<00:03, 18.32it/s]     68%|######8   | 137/200 [00:07<00:03, 18.13it/s]     70%|######9   | 139/200 [00:07<00:03, 17.66it/s]     70%|#######   | 141/200 [00:07<00:03, 17.99it/s]     72%|#######1  | 143/200 [00:07<00:03, 18.22it/s]     72%|#######2  | 145/200 [00:07<00:03, 17.93it/s]     74%|#######3  | 147/200 [00:08<00:02, 17.98it/s]     74%|#######4  | 149/200 [00:08<00:02, 17.98it/s]     76%|#######5  | 151/200 [00:08<00:02, 18.25it/s]     76%|#######6  | 153/200 [00:08<00:02, 18.51it/s]     78%|#######7  | 155/200 [00:08<00:02, 18.57it/s]     78%|#######8  | 157/200 [00:08<00:02, 18.39it/s]     80%|#######9  | 159/200 [00:08<00:02, 18.62it/s]     80%|########  | 161/200 [00:08<00:02, 18.72it/s]     82%|########1 | 163/200 [00:08<00:01, 18.77it/s]     82%|########2 | 165/200 [00:09<00:01, 18.56it/s]     84%|########3 | 167/200 [00:09<00:01, 18.77it/s]     84%|########4 | 169/200 [00:09<00:01, 18.81it/s]     86%|########5 | 171/200 [00:09<00:01, 18.71it/s]     86%|########6 | 173/200 [00:09<00:01, 18.77it/s]     88%|########7 | 175/200 [00:09<00:01, 18.83it/s]     88%|########8 | 177/200 [00:09<00:01, 18.93it/s]     90%|########9 | 179/200 [00:09<00:01, 18.70it/s]     90%|######### | 181/200 [00:09<00:01, 18.75it/s]     92%|#########1| 183/200 [00:09<00:00, 18.64it/s]     92%|#########2| 185/200 [00:10<00:00, 18.84it/s]     94%|#########3| 187/200 [00:10<00:00, 18.94it/s]     94%|#########4| 189/200 [00:10<00:00, 19.15it/s]     96%|#########5| 191/200 [00:10<00:00, 18.97it/s]     96%|#########6| 193/200 [00:10<00:00, 18.72it/s]     98%|#########7| 195/200 [00:10<00:00, 18.84it/s]     98%|#########8| 197/200 [00:10<00:00, 18.51it/s]    100%|#########9| 199/200 [00:10<00:00, 18.07it/s]    100%|##########| 200/200 [00:10<00:00, 18.32it/s]




.. GENERATED FROM PYTHON SOURCE LINES 177-179

View the Class Averages
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-183

.. code-block:: default


    # Show class averages
    avgs.images[0:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_pipeline_demo_005.png
   :alt: pipeline demo
   :srcset: /auto_tutorials/images/sphx_glr_pipeline_demo_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 184-190

.. code-block:: default


    # Show original images corresponding to those classes. This 1:1 comparison is only expected to
    # work because we used ``TopClassSelector`` to classify our images.
    src.images[0:10].show()





.. image-sg:: /auto_tutorials/images/sphx_glr_pipeline_demo_006.png
   :alt: pipeline demo
   :srcset: /auto_tutorials/images/sphx_glr_pipeline_demo_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 191-195

Orientation Estimation
----------------------
We initialize a ``CLSyncVoting`` class instance for estimating the orientations of the images.
The estimation employs the common lines method with synchronization and voting.

.. GENERATED FROM PYTHON SOURCE LINES 195-208

.. code-block:: default


    from aspire.abinitio import CLSyncVoting

    # Stash true rotations for later comparison
    true_rotations = src.rotations[:n_classes]

    orient_est = CLSyncVoting(avgs, n_theta=72)

    # Get the estimated rotations
    orient_est.estimate_rotations()
    rots_est = orient_est.rotations









.. GENERATED FROM PYTHON SOURCE LINES 209-213

Mean Squared Error
------------------
ASIPRE has some built-in utility functions for globally aligning the estimated rotations
to the true rotations and computing the mean squared error.

.. GENERATED FROM PYTHON SOURCE LINES 213-227

.. code-block:: default


    from aspire.utils.coor_trans import (
        get_aligned_rotations,
        get_rots_mse,
        register_rotations,
    )

    # Compare with known true rotations
    Q_mat, flag = register_rotations(rots_est, true_rotations)
    regrot = get_aligned_rotations(rots_est, Q_mat, flag)
    mse_reg = get_rots_mse(regrot, true_rotations)
    mse_reg






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.03823770680337834



.. GENERATED FROM PYTHON SOURCE LINES 228-232

Volume Reconstruction
---------------------
Now that we have our class averages and rotation estimates, we can estimate the
mean volume by supplying the class averages and basis for back projection.

.. GENERATED FROM PYTHON SOURCE LINES 232-249

.. code-block:: default


    from aspire.basis import FFBBasis3D
    from aspire.reconstruction import MeanEstimator

    # Assign the estimated rotations to the class averages
    avgs.rotations = rots_est

    # Create a reasonable Basis for the 3d Volume
    basis = FFBBasis3D(res, dtype=vol.dtype)

    # Setup an estimator to perform the back projection.
    estimator = MeanEstimator(avgs, basis)

    # Perform the estimation and save the volume.
    estimated_volume = estimator.estimate()









.. GENERATED FROM PYTHON SOURCE LINES 250-255

Comparison of Estimated Volume with Source Volume
-------------------------------------------------
To get a visual confirmation that our results are sane, we rotate the
estimated volume by the estimated rotations and project along the z-axis.
These estimated projections should align with the original projection images.

.. GENERATED FROM PYTHON SOURCE LINES 255-265

.. code-block:: default


    from aspire.source import ArrayImageSource

    # Get projections from the estimated volume using the estimated orientations.
    # We instantiate the projections as an ``ArrayImageSource`` to access the ``Image.show()`` method.
    projections_est = ArrayImageSource(estimated_volume.project(0, rots_est))

    # We view the first 10 projections of the estimated volume.
    projections_est.images[0:10].show()




.. image-sg:: /auto_tutorials/images/sphx_glr_pipeline_demo_007.png
   :alt: pipeline demo
   :srcset: /auto_tutorials/images/sphx_glr_pipeline_demo_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 266-269

.. code-block:: default


    # For comparison, we view the first 10 source projections.
    src.projections[0:10].show()



.. image-sg:: /auto_tutorials/images/sphx_glr_pipeline_demo_008.png
   :alt: pipeline demo
   :srcset: /auto_tutorials/images/sphx_glr_pipeline_demo_008.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 10 minutes  44.448 seconds)


.. _sphx_glr_download_auto_tutorials_pipeline_demo.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: pipeline_demo.py <pipeline_demo.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: pipeline_demo.ipynb <pipeline_demo.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
